#!/bin/bash

#------------------------------------------------------------------------------
# Helpers
#
err() {
    echo -e >&2 ERROR: $@\\n
}

die() {
    err $@
    exit 1
}

has() {
    # eg. has command update
    local kind=$1
    local name=$2

    type -t $kind:$name | grep -q function
}

#------------------------------------------------------------------------------
# Command handlers
#
command:update-image() {
    docker pull $FINAL_IMAGE
}

help:update-image() {
    echo Pull the latest $FINAL_IMAGE .
}

command:update-script() {
    if cmp -s <( docker run $FINAL_IMAGE ) $0; then
        echo $0 is up to date
    else
        echo -n Updating $0 '... '
        docker run $FINAL_IMAGE > $0 && echo ok
    fi
}

help:update-image() {
    echo Update $0 from $FINAL_IMAGE .
}

command:update() {
    command:update-image
    command:update-script
}

help:update() {
    echo Pull the latest $FINAL_IMAGE, and then update $0 from that.
}

command:help() {
    if [[ $# != 0 ]]; then
        if ! has command $1; then
            err \"$1\" is not an rpxc command
            command:help
        elif ! has help $1; then
            err No help found for \"$1\"
        else
            help:$1
        fi
    else
        cat >&2 <<ENDHELP
usage: rpxc command [args]

By default, runs the given command in an rpxc container.

Builtin commands:
    update-image
    update-script
    update

For command help use: $0 help <command>
ENDHELP
    fi
}

#------------------------------------------------------------------------------
# Option processing
#
while [[ $# != 0 ]]; do
    case $1 in

        --)
            break
            ;;

        --args)
            ARG_ARGS="$2"
            shift 2
            ;;

        --config)
            ARG_CONFIG="$2"
            shift 2
            ;;

        --image)
            ARG_IMAGE="$2"
            shift 2
            ;;

        --target)
            ARG_TARGET="$2"
            shift 2
            ;;

        -*)
            err Unknown option \"$1\"
            command:help
            exit
            ;;

        *)
            break
            ;;

    esac
done

# The precedence for options is:
# 1. command-line arguments
# 2. environment variables
# 3. defaults

# Source the config file if it exists
DEFAULT_CONFIG=~/.rpxc
FINAL_CONFIG=${ARG_CONFIG-${RPXC_CONFIG-$DEFAULT_CONFIG}}

[[ -f "$FINAL_CONFIG" ]] && source "$FINAL_CONFIG"

# Set the docker image
DEFAULT_IMAGE=sdt4docker/raspberry-pi-cross-compiler
FINAL_IMAGE=${ARG_IMAGE-${RPXC_IMAGE-$DEFAULT_IMAGE}}

# Set the target: one of raspbian32, raspbian64, gnusw, gnuhw
DEFAULT_TARGET=raspbian32
FINAL_TARGET=${ARG_TARGET-${RPXC_TARGET-$DEFAULT_TARGET}}

# Set the docker run extra args (if any)
FINAL_ARGS=${ARG_ARGS-${RPXC_ARGS}}

case $FINAL_TARGET in

    raspbian32)
        # Raspbian 32-bit
        HOST=arm-linux-gnueabihf
        BIN_DIR=gcc-linaro-$HOST-raspbian
        ;;

    raspbian64)
        # Raspbian 64-bit
        HOST=arm-linux-gnueabihf
        BIN_DIR=gcc-linaro-$HOST-raspbian-x64
        ;;

    gnusw)
        # Software-float GNU (not sure what this is really)
        HOST=arm-bcm2708-linux-gnueabi
        BIN_DIR=$HOST
        ;;

    gnuhw)
        # Hardware-float GNU (not sure what this is really)
        HOST=arm-bcm2708hardfp-linux-gnueabi
        BIN_DIR=$HOST
        ;;

    *)
        die Unknown target \"$FINAL_TARGET\" \
            "\n"Possible values: raspbian32, raspbian64, gnusw, gnuhw
        ;;

esac

CROSS_COMPILE=/rpxc/arm-bcm2708/$BIN_DIR/bin/$HOST-

# If we are not running via boot2docker
if [ -z $DOCKER_HOST ]; then
    USER_IDS="-e BUILDER_UID=$( id -u ) -e BUILDER_GID=$( id -g )"
fi

#------------------------------------------------------------------------------
# Command-line processing
#
if [[ $# == 0 ]]; then
    command:help
    exit
fi

case $1 in

    --)
        # Everything after this is the command-line to be executed
        shift
        ;;

    *)
        # If this is a builtin command, execute it, otherwise fall through
        if has command $1; then
            command:$1 "${@:2}" # array slice skipping first element
            exit $?
        fi
        ;;

esac

#------------------------------------------------------------------------------
# Now, finally, run the command in a container
#
docker run -i -t --rm \
    -v $PWD:/build \
    -e ARCH=arm \
    -e CROSS_COMPILE=$CROSS_COMPILE \
    -e HOST=$HOST \
    $USER_IDS \
    $FINAL_ARGS \
    $FINAL_IMAGE "$@"

################################################################################
#
#   This image is not intended to be run manually.
#
#   To install the rpxc helper, run the following commands:
#
#       docker run sdt4docker/raspberry-pi-cross-compiler > rpxc
#       chmod +x rpxc
#
#   You may then wish to move rpxc to somewhere in your path.
#
################################################################################
